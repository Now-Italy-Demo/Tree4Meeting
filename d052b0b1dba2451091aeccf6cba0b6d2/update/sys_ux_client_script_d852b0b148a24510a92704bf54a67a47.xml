<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ux_client_script">
    <sys_ux_client_script action="INSERT_OR_UPDATE">
        <includes>e75113c0c3302010de10a0f89d40dd0e</includes>
        <macroponent display_value="Record">1c52b0b1f1a24510208e2ee3adedc44e</macroponent>
        <name>recordUserPrefState</name>
        <required_translations>[ ]</required_translations>
        <script><![CDATA[/**
 * @param {params} params
 * @param {api} params.api
 * @param {any} params.event
 * @param {any} params.imports
 */
function handler({api, event, helpers, imports}) {
    // event name
    const eventName = event.name;
    

    // Sidebar specific constants
    const DEFAULT_RATIO_OPEN =  75;
    const DEFAULT_POSITION_CLOSED =  "-48px";
    const SIDEBAR_CLOSED_CONSTRAINT =  {  "minPixels": 48 };
    const SIDEBAR_OPEN_CONSTRAINT =  { "minRatio": 20, "minPixels": 370 };

    // import the getUserPreference method from userPreferenceUtils script includes
    const {
        getUserPreference
    } = imports["sn_uib_base_aw.userPreferenceUtils"](api.context.props.userPrefs);

    /**
     * setRibbonCollapsedState - Allows ribbon userPref to be toggled from the settings menu
     */
    const setRibbonCollapsedState = () => {
        // preference name
        const SHOW_RIBBON_PREF_NAME = "workspace.showRibbon";

        // fetch the user's show ribbon preference value
        const showRibbon = getUserPreference(SHOW_RIBBON_PREF_NAME);

        // set the showRibbon to isRibbonCollapsed in state properties
        api.setState('isRibbonCollapsed', !showRibbon);
    };

    /**
     * onLoadSidebarState - When page is loading, either a defined user pref is read for the sidebar ratio,
     * the preference name is initially built since the table name is part of the user pref name
     */
    const onLoadSidebarState = () => {
        // Build the user pref name for this preference at initialization time
        const PREFIX = "workspace.layout.sidebar_ratio.";
        const table = api.context.props.table || 'global';
        const sidebarRatioPreference = PREFIX + table;

        // save the preference name in a client state variable, which is bound to the data resouce below
        api.setState('sidebarRatioPreference', sidebarRatioPreference);

        // the preference name is read, now look it up.    
        api.data.getSidebarRatioPreference.refresh();
    };

    /**
     * toggleSidebar - toggle the sidebar based on whether the sidebar is shown or hidden
     */
    const toggleSidebar = (isHidden) => {
        if (isHidden) {
            // If the savedSidebarRatio has not been initialized before hiding the element
            // then save it before collapsing the sidebar.
            if(!api.state.sidebarRatioSaved)
                api.setState('sidebarRatioSaved', api.state.sidebarDividerPosition);

            // close the sidebar
            api.setState("sidebarPaneContraints", SIDEBAR_CLOSED_CONSTRAINT);
            api.setState("sidebarDividerPosition", DEFAULT_POSITION_CLOSED);
        } else {
            // open the sidebar
            api.setState("sidebarPaneContraints", SIDEBAR_OPEN_CONSTRAINT);
            api.setState("sidebarDividerPosition", api.state.sidebarRatioSaved);
        }
        api.setState("sidebarDisabled", isHidden);
    };

    /**
     * onChangeSidebarState - As a result of user pref setting toggle action, set the state of the sidebar
     */
    const onChangeSidebarState = () => {
        // preference name
        const SHOW_SIDEBAR_PREF_NAME = "workspace.showAgentAssist";

        // fetch the user's show sidebar preference value
        const pref = getUserPreference(SHOW_SIDEBAR_PREF_NAME);

        // set the showRibbon to isRibbonCollapsed in state properties
        toggleSidebar(!pref);
    };

    /**
     * onToggleSidebar - As a result of icon based toggle user action, set the state of the sidebar
     */
    const onToggleSidebar = () => {
        const { sidebarActiveTab, sidebarDisabled } = api.state;
        const { name } = event.payload;
        const isHidden = (name == sidebarActiveTab && !sidebarDisabled);
        toggleSidebar(isHidden);
    };

    /**
     * onLoadUserPreference - Determine whether to show the sidebar for new or users who do not have userPrefs saved
     */
    const onLoadUserPreference = (userPref) => {
        // preference name
        const SHOW_SIDEBAR_PREF_NAME = "workspace.showAgentAssist";

        // fetch the user's show sidebar preference value
        const sidebarOn = getUserPreference(SHOW_SIDEBAR_PREF_NAME);

        // Startup deterination of sidebar status, driven first by menu toggle, then by possibly save pref value
        var position;
        if(sidebarOn) {
              position =  (userPref.length > 0 && userPref[0].value) ? userPref[0].value : DEFAULT_RATIO_OPEN;
        } else {
              position = DEFAULT_POSITION_CLOSED;
              api.setState("sidebarPaneContraints", SIDEBAR_CLOSED_CONSTRAINT);
        }

        // persist the sidebar status in client state variables
        api.setState('sidebarDisabled', !sidebarOn);
        api.setState('sidebarDividerPosition', position);
        api.setState('sidebarRatioSaved', position);
    };

    // handle the user pref states based on one of the following changes: the macroponent ready event, 
    // macroponent property change event; sidebar icon clicks and the user pref  fetch succeded
    switch(eventName) {
        case 'MACROPONENT_READY':
            setRibbonCollapsedState();
            onLoadSidebarState();
            break;

        case 'MACROPONENT_PROPERTY_CHANGED':
            if (event.payload.name === 'userPrefs') {
                setRibbonCollapsedState();
                onChangeSidebarState();
            }
            break;

        case 'NOW_RECORD_COMMON_SIDEBAR#ACTION_CLICKED':
            onToggleSidebar();
            break;

        case 'DATA_FETCH_SUCCEEDED':
            if (event.elementId === 'getSidebarRatioPreference') 
                    onLoadUserPreference(api.data.getSidebarRatioPreference.result.preferences);
            break;

        default:
            break;
    }
}]]></script>
        <script_api_version>2.0.0</script_api_version>
        <sys_class_name>sys_ux_client_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2022-03-30 16:29:56</sys_created_on>
        <sys_id>d852b0b148a24510a92704bf54a67a47</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>recordUserPrefState</sys_name>
        <sys_package display_value="Tree4Meeting" source="x_snc_tree4meeting">d052b0b1dba2451091aeccf6cba0b6d2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Tree4Meeting">d052b0b1dba2451091aeccf6cba0b6d2</sys_scope>
        <sys_update_name>sys_ux_client_script_d852b0b148a24510a92704bf54a67a47</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2022-03-30 16:29:56</sys_updated_on>
        <type/>
    </sys_ux_client_script>
</record_update>
